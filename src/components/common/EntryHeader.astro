---
import { markdownify, slugify, upperHumanize, lowerHumanize } from "@lib/textConverter";
import { Image } from "astro:assets";
import {
  FaRegUserCircle,
  FaRegFolder,
  FaHashtag,
  FaRegClock,
} from "react-icons/fa";
import { FiLink } from "react-icons/fi";
import type { GenericEntry, EntryReference } from "@/types";

interface EntryData {
  title: string;
  description?: string;
  image?: any;
  imageAlt?: string;
  author?: EntryReference;
  categories?: string[]; 
  tags?: string[];
  complexity?: number;
}

interface Props {
  entry: GenericEntry;
  showInfo?: boolean;
  showImage?: boolean;
  showAuthor?: boolean;
  showReadingTime?: boolean;
  showCategories?: boolean;
  showTags?: boolean;
}

const {
  entry,
  showInfo = true,
  showImage = false,
  showAuthor = false,
  showReadingTime = false,
  showCategories = false,
  showTags = false,
}: Props = Astro.props;

const {
  title,
  description,
  author,
  categories,
  tags,
  image,
  imageAlt,
  complexity,
} = entry.data as EntryData;

categories?.sort((a: string, b: string) => a.localeCompare(b));
tags?.sort((a: string, b: string) => a.localeCompare(b));
---

<div class="mt-2">
  {image && showImage && (
    <div class="mb-8 glass rounded-lg intersect:animate-fadeDown opacity-0 intersect-no-queue">
      <!-- Imagen clicable para ampliar -->
      <a href={image?.src} target="_blank" rel="noopener noreferrer">
        <Image
          class="mx-auto w-full max-w-[600px] h-auto rounded-lg object-cover cursor-pointer"
          src={image}
          alt={imageAlt || ""}
          width={1200}
          height={500}
          loading="eager"
        />
      </a>
    </div>
  )}
</div>

{showInfo && (
  <div class="glass mb-8 p-6 rounded-lg intersect:animate-fade opacity-0 intersect-no-queue flex flex-col items-center">

    <!-- Título centrado en negro -->
    <h1 set:html={markdownify(title)} class="text-3xl font-bold mb-4 text-black text-center" />

    {description && (
      <>
        <!-- Recuadro destacado para el enlace del proyecto -->
        <div class="bg-blue-50 border border-blue-300 rounded-lg px-4 py-2 mb-6 inline-flex items-center gap-2 hover:bg-blue-100 transition">
          <FiLink class="w-5 h-5 text-blue-600" />
          <a 
            href={description.split('\n\n')[0].replace(/\[.*\]\((.*)\)/, '$1')} 
            target="_blank" 
            rel="noopener noreferrer" 
            class="text-blue-600 font-medium hover:underline"
          >
            Enlace proyecto
          </a>
        </div>

        <!-- Resto de la descripción renderizada como HTML -->
        <div
          class="prose prose-lg prose-gray dark:prose-invert text-left max-w-none"
          set:html={markdownify(description.split('\n\n').slice(1).join('\n\n'))}
        />
      </>
    )}

    <!-- Autor, categorías y tags centrados -->
    <ul class="flex flex-wrap justify-center gap-2 mt-6">
      {author && showAuthor && (
        <li class="inline-block">
          <a href={`/authors/${slugify(author.id)}`} class="flex items-center gap-1">
            <FaRegUserCircle class="inline-block" />
            {upperHumanize(author.id)}
          </a>
        </li>
      )}

      {complexity && showReadingTime && (
        <li class="inline-block flex items-center gap-1">
          <FaRegClock class="inline-block" />
          {complexity} min
        </li>
      )}

      {categories && showCategories && categories.map((cat) => (
        <li class="inline-block flex items-center gap-1">
          <a href={`/blog/categories/${slugify(cat)}`}>
            <FaRegFolder class="inline-block" />
            {upperHumanize(cat)}
          </a>
        </li>
      ))}

      {tags && showTags && tags.map((tag) => (
        <li class="inline-block flex items-center gap-1">
          <a href={`/blog/tags/${slugify(tag)}`}>
            <FaHashtag class="inline-block" />
            {lowerHumanize(tag)}
          </a>
        </li>
      ))}
    </ul>
  </div>
)}
